diff -ruN linux-5.9/arch/x86/entry/syscalls/syscall_64.tbl mylinux-5.9/arch/x86/entry/syscalls/syscall_64.tbl
--- linux-5.9/arch/x86/entry/syscalls/syscall_64.tbl    2020-10-12 02:45:50.000000000 +0530
+++ mylinux-5.9/arch/x86/entry/syscalls/syscall_64.tbl    2020-10-28 22:03:41.822982708 +0530
@@ -361,6 +361,7 @@
 437    common    openat2                    sys_openat2
 438    common    pidfd_getfd            sys_pidfd_getfd
 439    common    faccessat2            sys_faccessat2
+440    common    sh_task_info            sys_sh_task_info
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff -ruN linux-5.9/include/linux/syscalls.h mylinux-5.9/include/linux/syscalls.h
--- linux-5.9/include/linux/syscalls.h    2020-10-12 02:45:50.000000000 +0530
+++ mylinux-5.9/include/linux/syscalls.h    2020-10-28 22:01:03.835716728 +0530
@@ -1345,4 +1345,5 @@
                 int __user *optlen);
 int __sys_setsockopt(int fd, int level, int optname, char __user *optval,
                 int optlen);
+asmlinkage long sys_sh_task_info(pid_t pid,char* file);
 #endif
diff -ruN linux-5.9/Makefile mylinux-5.9/Makefile
--- linux-5.9/Makefile    2020-10-12 02:45:50.000000000 +0530
+++ mylinux-5.9/Makefile    2020-10-28 21:58:04.636609553 +0530
@@ -1094,7 +1094,7 @@
 export MODULES_NSDEPS := $(extmod-prefix)modules.nsdeps
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y            += kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y            += kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ sh_task_info/
 
 vmlinux-dirs    := $(patsubst %/,%,$(filter %/, \
                          $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff -ruN linux-5.9/sh_task_info/Makefile mylinux-5.9/sh_task_info/Makefile
--- linux-5.9/sh_task_info/Makefile    1970-01-01 05:30:00.000000000 +0530
+++ mylinux-5.9/sh_task_info/Makefile    2020-10-28 02:55:18.087104000 +0530
@@ -0,0 +1 @@
+obj-y := sh_task_info.o
\ No newline at end of file
diff -ruN linux-5.9/sh_task_info/sh_task_info.c mylinux-5.9/sh_task_info/sh_task_info.c
--- linux-5.9/sh_task_info/sh_task_info.c    1970-01-01 05:30:00.000000000 +0530
+++ mylinux-5.9/sh_task_info/sh_task_info.c    2020-10-28 21:53:50.830036187 +0530
@@ -0,0 +1,42 @@
+#include <linux/kernel.h>
+#include <linux/syscalls.h>
+#include <stdbool.h>
+#include<linux/fs.h>
+#include<linux/buffer_head.h>
+#include <asm/uaccess.h>
+SYSCALL_DEFINE2(sh_task_info,pid_t,pid,char*,file)
+{
+    struct task_struct *task;
+    bool x=false;
+    long a;
+    int c;
+    pid_t b;
+    char buff[200];
+    struct file *f;
+    for_each_process(task){
+            if(task->pid==pid){
+                    x=true;
+                    a=task->state;
+                    b=task->pid;
+                    c=task->prio;
+                    char *d=task->comm;
+                    char pid[]="PID:";
+                    char process[]="Process:";
+                    char state[]="State:";
+                    char priority[]="Priority:";
+                    f=filp_open(file,O_RDWR | O_CREAT,0644);
+                    if(IS_ERR(f)){
+                            printk("File access denied.");
+                            return -EACCES;
+                    }
+                    printk("State: %ld\n PID: %d\n Process: %s\n Priority: %d\n",task->state,task->pid,task->comm,task->prio);
+                    snprintf(buff,200,"%s %ld %s %d %s %s %s %d",state,a,pid,b,process,d,priority,c);
+                    kernel_write(f,buff,200,0);
+                    }
+    }
+    if(!x){
+            printk("No such process - pid not found.");
+    }
+    filp_close(f,NULL);
+    return 0;
+}
\ No newline at end of file
